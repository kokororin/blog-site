<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ことりのおやつにしてやるぞー！</title>
  
  <subtitle>=w=</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kotori.love/"/>
  <updated>2020-02-03T11:12:14.060Z</updated>
  <id>https://kotori.love/</id>
  
  <author>
    <name>そら</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「2020」 除草 (★^O^★)</title>
    <link href="https://kotori.love/archives/first-post-2020.html"/>
    <id>https://kotori.love/archives/first-post-2020.html</id>
    <published>2020-02-02T14:36:00.000Z</published>
    <updated>2020-02-03T11:12:14.060Z</updated>
    
    <content type="html"><![CDATA[<p>突然想起来还有这个地方，2020 年为了证明我还活着！！！<br>我把 Typecho 转到 Hexo 啦～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然想起来还有这个地方，2020 年为了证明我还活着！！！&lt;br&gt;
我把 Typecho 转到 Hexo 啦～～～&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>adb 删除乱码文件 (夹)</title>
    <link href="https://kotori.love/archives/adb-delete-garbled-file.html"/>
    <id>https://kotori.love/archives/adb-delete-garbled-file.html</id>
    <published>2018-04-18T08:32:51.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>emmmm… 万年不水文</p></blockquote><p>事情是这样的，在 Windows 下拷贝了一个中文目录进去，结果在手机上看就乱码了，而且目录里的文件都看不到，于是搜索找到一个 Linux 下删除乱码的办法：</p><pre><code class="language-bash">adb shellls -i</code></pre><p>看到类似的输出：</p><pre><code> 6283265 鏂板缓\346\226</code></pre><p>然后使用命令删除：</p><pre><code class="language-bash">find -inum 6283265 -exec rm -rf {} \;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;emmmm… 万年不水文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事情是这样的，在 Windows 下拷贝了一个中文目录进去，结果在手机上看就乱码了，而且目录里的文件都看不到，于是搜索找到一个 Linux 下删除乱码的办法：&lt;/p&gt;
&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="Android" scheme="https://kotori.love/tags/Android/"/>
    
      <category term="adb" scheme="https://kotori.love/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>Aqours LIVE &amp;&amp; FMT 歌单</title>
    <link href="https://kotori.love/archives/aqours-fmt-in-shanghai-playlist.html"/>
    <id>https://kotori.love/archives/aqours-fmt-in-shanghai-playlist.html</id>
    <published>2018-01-13T08:05:00.000Z</published>
    <updated>2020-02-02T14:46:18.507Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static-files.kotori.love/blog/2018/01/3683069952.jpg" alt="657e1e395343fbf20bbf7cf3bb7eca8064388f77.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://static-files.kotori.love/blog/2018/01/3683069952.jpg&quot; alt=&quot;657e1e395343fbf20bbf7cf3bb7eca8064388f77.jpg&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="终点" scheme="https://kotori.love/categories/%E7%BB%88%E7%82%B9/"/>
    
    
      <category term="Aqours" scheme="https://kotori.love/tags/Aqours/"/>
    
  </entry>
  
  <entry>
    <title>一些好用的 git 代码段</title>
    <link href="https://kotori.love/archives/useful-git-snippets.html"/>
    <id>https://kotori.love/archives/useful-git-snippets.html</id>
    <published>2017-12-02T12:28:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加历史tag">添加历史 tag</h3><pre><code class="language-bash">git tag -a v1.2 9fceb02 -m &quot;Message here&quot;git push --tags origin master</code></pre><h3 id="tag排序">tag 排序</h3><pre><code class="language-bash"># Loop over tagsgit tag -l | while read -r tagdo    # get the commit hash of the current tag    COMMIT_HASH=$(git rev-list -1 $tag)    # get the commit date of the tag and create a new tag using    # the tag's name and message. By specifying the environment    # environment variable GIT_COMMITTER_DATE before this is    # run, we override the default tag date. Note that if you    # specify the variable on a different line, it will apply to    # the current environment. This isn't desired as probably    # don't want your future tags to also have that past date.    # Of course, when you close your shell, the variable will no    # longer persist.    GIT_COMMITTER_DATE=&quot;$(git show $COMMIT_HASH --format=%aD | head -1)&quot; git tag -a -f $tag -m&quot;$tag&quot; $COMMIT_HASHdone# Force push tags and overwrite ones on the server with the same namegit push --tags --force</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;添加历史tag&quot;&gt;添加历史 tag&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag -a v1.2 9fceb02 -m &amp;quot;Message here&amp;quot;
git push --tags origin m
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="git" scheme="https://kotori.love/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>React AsyncComponent 的一些问题</title>
    <link href="https://kotori.love/archives/problems-with-react-async-component.html"/>
    <id>https://kotori.love/archives/problems-with-react-async-component.html</id>
    <published>2017-11-27T03:28:00.000Z</published>
    <updated>2020-02-02T14:46:18.507Z</updated>
    
    <content type="html"><![CDATA[<p>找到一个<a href="https://github.com/ctrlplusb/react-async-component" target="_blank" rel="noopener"> react-async-component</a> 可以实现 React 组件的异步加载。</p><p>使用方法大概是这样的：（以 <code>react-cropper</code>  为例）</p><pre><code class="language-javascript">import { asyncComponent } from 'react-async-component';export default asyncComponent({  resolve: () =&gt; import('react-cropper')});</code></pre><p>但是这样导致的问题是无法获取到 <code>react-cropper</code>  组件的 ref 属性，此时获取到的 ref 是 <code>AsyncComponent</code> 。<br><img src="https://static-files.kotori.love/blog/2017/11/3017572352.jpg" alt=""></p><p>所以需要把 <code>react-cropper</code>  包一层：</p><pre><code class="language-javascript">// Cropper.jsimport React from 'react';import PropTypes from 'prop-types';import ReactCropper from 'react-cropper';import 'cropperjs/dist/cropper.css';export default class Cropper extends React.Component {  static defaultProps = {    onRef() {}  };  static propTypes = {    onRef: PropTypes.func  };  componentDidMount() {    this.props.onRef(this.cropperRef);  }  render() {    return (      &lt;ReactCropper ref={ref =&gt; (this.cropperRef = ref)} {...this.props} /&gt;    );  }}</code></pre><pre><code class="language-javascript">// AsyncCropper.jsimport { asyncComponent } from 'react-async-component';export default asyncComponent({  resolve: () =&gt; import('@/components/Cropper')});</code></pre><p>然后引入 <code>AsyncCropper</code>  就可以了 = w=</p><pre><code class="language-javascript">&lt;AsyncCropper onRef={ref=&gt;this.cropper = ref} /&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;找到一个&lt;a href=&quot;https://github.com/ctrlplusb/react-async-component&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; react-async-component&lt;/a&gt; 可以实现 React 组件的
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="webpack" scheme="https://kotori.love/tags/webpack/"/>
    
      <category term="react" scheme="https://kotori.love/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack 集成 basket.js 实现 localStorage 本地缓存</title>
    <link href="https://kotori.love/archives/integrates-basket-into-webpack.html"/>
    <id>https://kotori.love/archives/integrates-basket-into-webpack.html</id>
    <published>2017-11-09T08:55:00.000Z</published>
    <updated>2020-02-02T14:46:18.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="basket-js-是什么">basket.js 是什么</h3><p><a href="https://github.com/addyosmani/basket.js" target="_blank" rel="noopener">basket.js</a> 可以用来加载 js 和 css 脚本并且保存到  <code>LocalStorage</code>  上，使我们可以更加精准地控制缓存，即使是在 http 缓存过期之后也可以使用。因此可以使我们防止不必要的重新请求 js 脚本，提升网站加载速度。</p><h3 id="basket-js的简单使用方式">basket.js 的简单使用方式</h3><pre><code class="language-javascript">basket.require({url: 'helloworld.js'});</code></pre><h3 id="和浏览器缓存相比的优势">和浏览器缓存相比的优势</h3><p>在 PC 端和浏览器缓存相比没有任何优势，移动端 SPA 值得尝试。<br>（特别是在某信的 WebView 里，304 缓存的时间短如<a href="https://zh.moegirl.org/%E6%A8%B1%E5%86%85%E6%A2%A8%E5%AD%90" target="_blank" rel="noopener">小香菇</a> 2333）</p><hr><p>以下总结来自<a href="https://www.zhihu.com/question/28467444" target="_blank" rel="noopener">某乎</a>：</p><h4 id="PC上应用价值不大的原因在于：">PC 上应用价值不大的原因在于：</h4><ul><li>兼容性不太好，不支持 LS 的浏览器比例仍然很大</li><li>网络速度快，协商缓存响应快，LS 读取 + eval 很多时候会比不上 304</li><li>通常需要 SEO，导致 css 不能缓存，仅缓存 js 使得整个缓存方案意义进一步减小</li><li>浏览器本地缓存足够可靠持久</li><li>跨页面间共享缓存即便有浪费也差别不大</li></ul><h4 id="移动端webapp值得一试的原因在于：">移动端 webapp 值得一试的原因在于：</h4><ul><li>兼容性好</li><li>网速慢，LS 读取 + eval 大多数情况下快于 304</li><li>都说是 webapp 了，不需要 seo，css 也可以缓存，再通过 js 加载</li><li>浏览器缓存经常会被清理，LS 被清理的几率低一些</li><li>以模块文件为单位，缓存失效率低</li><li>不同页面状态直接访问、二次访问、页面状态跳转资源组合是不确定的，不能通过 url 来缓存资源，否则就不 “增量” 啦</li></ul><h3 id="暗中观察">暗中观察</h3><p>以最常见的 <code>vue-cli</code>  来举例（PS：虽然不用 Vue，但是它的 webpack 配置还行，直接抄了），默认会打包出以下几个 js 文件，在 Chrome 的 <code>network</code>  选项卡中可以看到加载过程。<br><img src="https://static-files.kotori.love/blog/2017/11/1423021124.png" alt=""></p><h3 id="改造HtmlWebpackPlugin的模板文件">改造 HtmlWebpackPlugin 的模板文件</h3><p>在 ejs 模板中加入以下代码， <code>keys</code>  数组可能需要对应自己的 <code>entry</code>  名来修改。</p><pre><code class="language-html">&lt;% if (process.env.NODE_ENV === 'production') { %&gt;    &lt;script src=&quot;&lt;%=htmlWebpackPlugin.files.publicPath %&gt;basket.full.min.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;      &lt;%      var resources = [];      var keys = [&quot;manifest&quot;, &quot;vendor&quot;, &quot;main&quot;];      // css      for (var css in htmlWebpackPlugin.files.css) {        resources.push({          url: htmlWebpackPlugin.files.css[css],          execute: false        });      }      // js      var i = -1;      for (var chunk in htmlWebpackPlugin.files.chunks) {        i++;        resources.push({          url: htmlWebpackPlugin.files.chunks[chunk].entry,          execute: true        });      }      %&gt;      (function(b) {        b.require.apply(this, &lt;%=JSON.stringify(resources) %&gt;)          .then(function(responses) {            responses.forEach(function(response) {              if (!response.execute) {                var style = document.createElement('style');                style.innerHTML = response.data;                var head = document.getElementsByTagName('head')[0];                head.appendChild(style);              }            });          });      })(basket);    &lt;/script&gt;&lt;% } &gt;</code></pre><p>webpack 配置文件也需要相应修改，因为没有用到 CDN 上的 <code>basket.full.min.js</code> ，所以就自己本地托管吧。<br>使用 <code>CopyWebpackPlugin</code>  把 <code>node_modules</code>  目录中的 js 复制到打包目录下：</p><pre><code class="language-javascript"> new CopyWebpackPlugin([      {        from: path.join(__dirname, 'node_modules/basket.js/dist/basket.full.min.js'),        to: path.join(__dirname, 'dist')      }])</code></pre><p>同时 <code>HtmlWebpackPlugin</code>  中 <code>inject</code>  选项需要设置为 <code>false</code> ，这样打包的时候就不会在 <code>index.html</code>  中置入 <code>&lt;script&gt;</code>  标签啦～(≧▽≦)/~。</p><h3 id="大成功">大成功</h3><p>重新打包编译，打开浏览器测试，可以看到结果。 <code>basket.js</code>  会以 ajax 的形式调用这些静态文件并缓存到 <code>LocalStorage</code>  里。<br><img src="https://static-files.kotori.love/blog/2017/11/2026310482.png" alt=""><br><img src="https://static-files.kotori.love/blog/2017/11/1501695632.png" alt="Screenshot from 2017-11-09 13:07:47.png"></p><p>再次刷新页面，就不会有这些请求～(≧▽≦)/~ 啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;basket-js-是什么&quot;&gt;basket.js 是什么&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/addyosmani/basket.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;basket.js&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="webpack" scheme="https://kotori.love/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-dev-server 在 Safari 中的问题</title>
    <link href="https://kotori.love/archives/webpack-dev-server-issue-in-safari.html"/>
    <id>https://kotori.love/archives/webpack-dev-server-issue-in-safari.html</id>
    <published>2017-10-11T05:30:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack-dev-server &gt;= 2.8.0 的版本在 iOS Safari 下无法打开网页，效果为白屏。<br>控制台报错： <code>Can't find variable: SockJS</code></p><p>应该是 Safari 的<a href="https://stackoverflow.com/questions/46036960/evaluated-expression-const-variable-scope-in-safari" target="_blank" rel="noopener"> BUG</a>，比如下面的代码就会抛出 Error</p><pre><code class="language-javascript">eval(&quot;const a = function () {}; function b() {  a(); }; b();&quot;)</code></pre><blockquote><p>ReferenceError: Can’t find variable: a</p></blockquote><h3 id="解决方法">解决方法</h3><h4 id="使用老版本（bu"><s>使用老版本（bu</s></h4><pre><code>yarn add webpack-dev-server@~2.7.0 -D</code></pre><h4 id="其它方法">其它方法</h4><pre><code>yarn add babel-plugin-transform-es2015-block-scoping -D</code></pre><p>修改 webpack 相关配置</p><pre><code>{  test: /\.js$/,  loader: 'babel-loader',  include: [    ...,    /node_modules\/webpack-dev-server/  ]}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack-dev-server &amp;gt;= 2.8.0 的版本在 iOS Safari 下无法打开网页，效果为白屏。&lt;br&gt;
控制台报错： &lt;code&gt;Can&#39;t find variable: SockJS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应该是 Safari 的&lt;a h
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="javascript" scheme="https://kotori.love/tags/javascript/"/>
    
      <category term="safari" scheme="https://kotori.love/tags/safari/"/>
    
  </entry>
  
  <entry>
    <title>LINE 社交登录简单记录</title>
    <link href="https://kotori.love/archives/line-social-login.html"/>
    <id>https://kotori.love/archives/line-social-login.html</id>
    <published>2017-09-26T03:36:00.000Z</published>
    <updated>2020-02-02T14:46:18.507Z</updated>
    
    <content type="html"><![CDATA[<p>首先要去<a href="https://developers.line.me/" target="_blank" rel="noopener"> LINE developers</a> 注册一个账号～<br>创建好应用以后获取 <code>client_id</code>  和 <code>client_secret</code></p><p>大致流程和微信是一样的 0w0</p><hr><h3 id="获取code">获取 code</h3><p>将用户重定向到 <code>https://access.line.me/dialog/oauth/weblogin?response_type=code&amp;client_id=xxx&amp;redirect_uri=xxx</code>  这个地址</p><p>用户登录完了以后会跳转至上一步的 <code>redirect_uri</code> ，并带上 code 参数。</p><p><img src="https://static-files.kotori.love/blog/2017/09/1363619783.png" alt="Screenshot from 2017-09-26 11:53:33.png"></p><h3 id="获取access-token">获取 access_token</h3><p>我们的服务器获取到 code 以后，向 LINE 的服务器发送一个 POST 请求，注意这里的 <code>Content-Type</code>  是 <code>application/x-www-form-urlencoded</code> 。</p><pre><code class="language-bash">curl -X POST \https://api.line.me/v2/oauth/accessToken \-H 'content-type: application/x-www-form-urlencoded' \-d 'grant_type=authorization_code&amp;client_id=xxx&amp;client_secret=xxx&amp;code=xxx&amp;redirect_uri=xxx'</code></pre><p>LINE 服务器会返回如下结果：</p><pre><code class="language-json">    {       &quot;scope&quot;:&quot;P&quot;,       &quot;access_token&quot;:&quot;bNl4YEFPI/hjFWhTqexp4MuEw5YPs7qhr6dJDXKwNPuLka...&quot;,       &quot;token_type&quot;:&quot;Bearer&quot;,       &quot;expires_in&quot;:2591977,       &quot;refresh_token&quot;:&quot;8iFFRdyxNVNLWYeteMMJ&quot;     }</code></pre><h3 id="获取用户信息">获取用户信息</h3><p>最后使用获取到的 <code>access_token</code>  发送获取用户信息的请求：</p><pre><code class="language-bash">curl -X GET \-H 'Authorization: Bearer bNl4YEFPI/hjFWhTqexp4MuEw5YPs7qhr6dJDXKwNPuLka...' \https://api.line.me/v2/profile</code></pre><p>结果是酱紫的：</p><pre><code class="language-json">{  &quot;userId&quot;:&quot;Ufr47556f2e40dba2456887320ba7c76d&quot;,  &quot;displayName&quot;:&quot;Brown&quot;,  &quot;pictureUrl&quot;:&quot;https://example.com/abcdefghijklmn&quot;,  &quot;statusMessage&quot;:&quot;Hello, LINE!&quot;}</code></pre><hr><p>结束惹。很简单吧（x</p><p>最后发现 Web 版 Social Login 能唤醒客户端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先要去&lt;a href=&quot;https://developers.line.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; LINE developers&lt;/a&gt; 注册一个账号～&lt;br&gt;
创建好应用以后获取 &lt;code&gt;client_id&lt;/code
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="LINE" scheme="https://kotori.love/tags/LINE/"/>
    
  </entry>
  
  <entry>
    <title>React JSX 中 unicode 的处理</title>
    <link href="https://kotori.love/archives/unicode-in-jsx.html"/>
    <id>https://kotori.love/archives/unicode-in-jsx.html</id>
    <published>2017-08-25T02:19:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为某些需要，创建了一个 iconfont 的组件，旨在根据 unicode 的～～id???~~ 来创建对应的图标字体，大致用法是这样的</p><pre><code class="language-js">&lt;Icon content=&quot;628&quot; /&gt;</code></pre><p>这样就会生成一段 html</p><pre><code class="language-html">&lt;i class=&quot;iconfont&quot;&gt;&amp;#xe628;&lt;/i&gt;</code></pre><p>如果这样还好办，可以用 <code>dangerouslySetInnerHTML</code>  达到效果。</p><p>但是，有些情况下，需要达到如下效果</p><pre><code class="language-js">&lt;Icon tagName=&quot;input&quot; content=&quot;628&quot; /&gt;</code></pre><p>生成这样的 html</p><pre><code class="language-html">&lt;input class=&quot;iconfont&quot; type=&quot;button&quot; value=&quot;&amp;#xe628;&quot; /&gt;</code></pre><p><s>可是为什么不生成 <code>&lt;button type=&quot;button&quot;&gt;&amp;#xe628;&lt;/button&gt;</code>  呢 (⊙o⊙)</s></p><p>如果在组件中直接拼字符串，会在页面上吧 <code>&amp;#xe628;</code>  直接输出</p><pre><code class="language-js">const Icon = ({ content }) =&gt;  &lt;input className=&quot;iconfont&quot; type=&quot;button&quot; defaultValue={`&amp;#xe${content};`} /&gt;;</code></pre><p>不过，把 unicode 稍微转换一下就可以啦 (●′ω`●)</p><pre><code class="language-js">const convertUnicode = input =&gt;  input.replace(/\\u(\w\w\w\w)/g, (a, b) =&gt;    String.fromCharCode(parseInt(b, 16))  );const Icon = ({ content }) =&gt;  &lt;input class=&quot;iconfont&quot; type=&quot;button&quot; defaultValue={convertUnicode(`\\ue${content}`)} /&gt;;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为某些需要，创建了一个 iconfont 的组件，旨在根据 unicode 的～～id???~~ 来创建对应的图标字体，大致用法是这样的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;Icon content=&amp;quot;628&amp;quot;
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="react" scheme="https://kotori.love/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>从外部获取 php 类的私有属性</title>
    <link href="https://kotori.love/archives/php-get-private-property.html"/>
    <id>https://kotori.love/archives/php-get-private-property.html</id>
    <published>2017-08-23T03:47:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近把 Typecho 升级到了 1.1 (17.8.17)，然后主题部分功能挂了，应该是以前<s>魔改</s>过核心代码导致的，70 说国庆会出一个 Beta 版，看来以后还是不改源代码了 …⁄(⁄ ⁄・⁄ω⁄・⁄ ⁄)⁄…</p></blockquote><p>Typecho 评论页中，如果要获取当前的页码是没有办法的，可能需要调用 <code>$comments-&gt;_currentPage</code> ，但是 <code>Widget_Comments_Archive::_currentPage</code>  是 <code>private</code>  的。</p><p>在不修改源代码的情况下，可以使用<a href="http://php.net/manual/zh/class.reflectionclass.php" target="_blank" rel="noopener"> ReflectionClass</a> 来获取。</p><p>代码如下：</p><pre><code class="language-php">$reflection = new ReflectionClass($comments);$currentPage = $reflection-&gt;getProperty('_currentPage');$currentPage-&gt;setAccessible(true);$currentPage = $currentPage-&gt;getValue(($comments));echo $currentPage;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近把 Typecho 升级到了 1.1 (17.8.17)，然后主题部分功能挂了，应该是以前&lt;s&gt;魔改&lt;/s&gt;过核心代码导致的，70 说国庆会出一个 Beta 版，看来以后还是不改源代码了 …⁄(⁄ ⁄・⁄ω⁄・⁄ ⁄)⁄…&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="php" scheme="https://kotori.love/tags/php/"/>
    
      <category term="typecho" scheme="https://kotori.love/tags/typecho/"/>
    
  </entry>
  
  <entry>
    <title>定位领取 SIF 感谢祭奖励</title>
    <link href="https://kotori.love/archives/lovelive-sif-2017-thanksgiving-virtual-positioning.html"/>
    <id>https://kotori.love/archives/lovelive-sif-2017-thanksgiving-virtual-positioning.html</id>
    <published>2017-06-02T01:42:00.000Z</published>
    <updated>2020-02-02T14:46:18.567Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static-files.kotori.love/blog/2017/06/583732268.png" alt=".png"></p><blockquote><p>池袋・サンシャインシティ周辺にて、スクフェスにログインすると、ゲーム内の「背景」や「称号」をゲットすることができます！！<br>ゲットした「背景」や「称号」を設定してみんなで「スクフェス感謝祭 2017」を盛り上げよう♪</p></blockquote><blockquote><p>※ご使用端末の位置情報設定を ON にしてご利用ください。<br>※1 アカウントにつき各種 1 回まで取得可能です。<br>※6/10 (土) 09:00 〜 6/11 (日) 23:59 まではホームバナーおよび「その他 ＞ 位置情報」メニューから受け取り可能です<br>※背景のみ 6/12 (月) 0:00 以降も「その他 ＞ 位置情報メニュー」から受け取り可能です</p></blockquote><blockquote><p>【背景】噴水広場・池袋 サンシャインシティ<br>配布期間: 6/10 (土) 09:00 〜 無期限</p></blockquote><blockquote><p>【称号】スクフェス感謝祭 2017<br> 配布期間: 6/10 (土) 09:00 〜 6/11 (日) 23:59<br>※こちらの称号は先行配信です。後日、7/15 よりシール SHOP にて再配信予定です。</p></blockquote><p>大概就是 10 号感谢祭到现场可以领取背景和称号奖励，嘛就是这样……</p><p>难道我等不在日玩家就要少了一个背景吗。。。</p><p>虚拟定位到 Sunshine City (サンシャインシティ、池袋附近)<br> 可破 （应该，到时候测试一下吧）</p><p><img src="https://static-files.kotori.love/blog/2017/06/3658065054.jpg" alt="1.jpg"></p><p>设置好位置后，打开其他地图应用，可以看到位置已经变了 (┌^o^)┐</p><p><img src="https://static-files.kotori.love/blog/2017/06/2680981258.jpg" alt="2.jpg"><br><img src="https://static-files.kotori.love/blog/2017/06/2853152459.jpg" alt="3.jpg"></p><p><strong>6 月 5 日更新</strong><br> Android 开启了开发者模式后会在游戏中提示！！！</p><p>设备的开发者选项被打开了<br>模拟位置函数不能被使用<br>请检查你的设备设置<br><img src="https://static-files.kotori.love/blog/2017/06/588508535.jpg" alt="58200ffc1e178a82c09aaccbfc03738da977e83b.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://static-files.kotori.love/blog/2017/06/583732268.png&quot; alt=&quot;.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;池袋・サンシャインシティ周辺にて、スクフェスにログインすると、ゲーム
      
    
    </summary>
    
    
      <category term="次元" scheme="https://kotori.love/categories/%E6%AC%A1%E5%85%83/"/>
    
    
      <category term="LOVE LIVE!" scheme="https://kotori.love/tags/LOVE-LIVE/"/>
    
      <category term="sif" scheme="https://kotori.love/tags/sif/"/>
    
  </entry>
  
  <entry>
    <title>SIF 账号申诉流程</title>
    <link href="https://kotori.love/archives/lovelive-sif-account-recovery.html"/>
    <id>https://kotori.love/archives/lovelive-sif-account-recovery.html</id>
    <published>2017-05-31T13:15:00.000Z</published>
    <updated>2020-02-02T14:46:18.507Z</updated>
    
    <content type="html"><![CDATA[<p>嘛…… 之前 SIF 账号由于手贱弄丢了，所以这里记录一下申诉流程 w</p><p>首先要给 <code>info-lovelive@klab.com</code>  发一封邮件表明情况</p><p>如果是切账号时忘记设置密码就用这个</p><blockquote><p>私は二つのアカウントを持ちます。普通は引き継ぎパスワードにスクリーンショットをして保存します。でも、今回は、私はパスワードを設定せずに別のアカウントを引き継ぎしました。今、このアカウントがローグインできません。すみませんが、お助けをください。お面倒を挂けて本当にすみませんでした。<br>私のゲームの名前：【】<br>ユーザー ID：【】<br>端末の OS は Android/IOS です。</p></blockquote><p>老玩家回归没有新版引继码的用这个</p><blockquote><p>今私もう一度ゲームをインストールしました。でも、引き継ぎ ID がなかったので、引き継ぐことができませんでした。今、このアカウントがローグインできません。すみませんが、お助けをください。お面倒を挂けて本当にすみませんでした。<br>私のゲームの名前：【】<br>ユーザー ID：【】<br>端末の OS は Android/IOS です。</p></blockquote><p>然后不许摸过了一天就会给你发一封邮件：（以下省略不许摸的客套话）</p><blockquote><p>※お客様情報入力時の注意点※<br>１.【回答】部分にご記載ください。<br>２. すべての項目にご回答ください。<br>３. わからない場合は「不明」とご記載ください。</p></blockquote><blockquote><hr></blockquote><p>◆別のメールアドレスでお問い合わせをされたことがあるか<br>　ある場合、該当のメールアドレスをお教えください<br>　（ドメインが異なる場合もご連絡ください）<br>【回答】：</p><blockquote><p>※お問い合わせをされたことがない場合は、回答欄に「なし」とご記載ください。</p></blockquote><blockquote><hr><p>◆ユーザー ID〈必須〉<span style="color:red">游戏 ID</span><br>【回答】：</p></blockquote><blockquote><p>※プロフィール画面の 9 桁の数字です。</p></blockquote><blockquote><hr><p>◆登録名〈必須〉 <span style="color:red">名字</span><br>【回答】：</p></blockquote><blockquote><hr></blockquote><p>◆ランク <span style="color:red">rank</span><br>【回答】：</p><blockquote><hr></blockquote><p>◆有償アイテム (ラブカストーン、各種セット販売アイテム等) の購入履歴画像の添付（2 枚以上）<br>【回答】：<span style="color:red">课金记录截图</span></p><blockquote><p>※購入したことがない場合は、回答欄に「購入なし」とご記載ください。<br>※iTunes または、Google ウォレットの購入履歴・レシートメールのスクリーンショット</p></blockquote><blockquote><hr><p>◆過去に使用したことのあるシリアルコード <span style="color:red">所有使用过的序列号</span><br>【回答】：</p></blockquote><blockquote><p>※使用したことがない場合は、回答欄に「なし」とご記載ください。</p></blockquote><blockquote><hr><p>◆過去の課金時に使用していた端末名と OS バージョン <span style="color:red">课金设备和操作系统版本号</span><br>【回答】：</p></blockquote><blockquote><p>※OS バージョンは覚えている場合ご記載ください。</p></blockquote><blockquote><hr><p>◆アプリの登録日時〈必須〉<span style="color:red">第一次登录日期</span><br>【回答】：</p></blockquote><blockquote><p>例）20●●年●月●日</p></blockquote><blockquote><hr><p>◆初期選択部員名〈必須〉<span style="color:red">初始部员</span><br>【回答】：</p></blockquote><blockquote><p>※当アプリを始めた時に一番最初に選んだ部員名をご記載ください。</p></blockquote><blockquote><hr><p>◆最後にログインを行った日時〈必須〉<span style="color:red">最后登录时间</span><br>【回答】：</p></blockquote><blockquote><p>例）20●●年●月●日</p></blockquote><blockquote><hr><p>◆これまで使用していた端末名と OS バージョン〈必須〉 <span style="color:red">所有使用过的设备和操作系统版本</span><br>【回答】：</p></blockquote><blockquote><p>※OS バージョンは覚えている場合ご記載ください。<br>※複数使用されていた場合は、覚えている範囲の端末名をすべてご記載ください。</p></blockquote><blockquote><hr><p>◆過去に使用した引き継ぎパスワード（16 桁の数字） <span style="color:red">过去使用过的继承码</span><br>【回答】：</p></blockquote><blockquote><p>※過去に当アプリで発行した引き継ぎパスワード（16 桁の数字）をご記載ください。<br>※ご自身で設定した引き継ぎパスワードを使用した場合は、回答欄に「なし」とご記載ください。</p></blockquote><blockquote><hr><p>◆ユニット名〈必須〉 <span style="color:red">队伍名</span><br>【回答】：</p></blockquote><blockquote><p>※設定したユニット名を覚えている範囲ですべてご記載ください。</p></blockquote><blockquote><hr><p>◆メイン以外のセンター部員 <span style="color:red">主队以外的 C 位部员的技能名或卡名</span><br>【回答】：</p></blockquote><blockquote><p>※部員名と絵柄の特徴、または特技名をご記載ください。</p></blockquote><blockquote><hr><p>◆フレンドの名前 <span style="color:red">好友的名字</span><br>【回答】：</p></blockquote><blockquote><hr></blockquote><p>◆アプリ内メールの履歴〈必須〉<span style="color:red">邮件历史</span><br>【回答】：</p><blockquote><p>※他のユーザー様とメールのやりとりをした場合、その内容をご記載ください。<br>　(例：◯◯さんと◯◯について話をしました 等)</p></blockquote><p>以上全部填完以后回信，一天左右，会告诉你已经收到信息，等待我们审核</p><p>然后大概一星期左右，收到如下邮件：（省略废话）</p><blockquote><p>今回は情報不足のため本人確認をおこなうことができませんでした。<br>お客様のお力になれず、誠に申し訳ございません。</p></blockquote><blockquote><p>以前のデータの復旧をご希望される場合は、<br>下記項目についてご記入の上、ご返信ください。</p></blockquote><blockquote><p>===============</p></blockquote><blockquote><p>◆チュートリアルの際に選択した μ’s もしくは Aqours の部員名を教えてください：<span style="color:red">初始部员</span></p></blockquote><blockquote><p>◆初めて参加したイベントを教えてください：<span style="color:red">初次参加的活动名</span></p></blockquote><blockquote><p>◆最初に獲得した UR 部員の名前と特技名を教えてください：<span style="color:red">最初获得的 UR</span></p></blockquote><blockquote><p>◆今までに当アプリで使用したことがある端末の正確な機種名、OS のバージョンを全て教えてください <span style="color:red">所有登录过的设备</span><br>　※OS のみの申告では調査を行うことができません<br>　　機種名（iPhone4、Xperia Z など）：<br>　　OS（iOS7、Android4.1 など）：</p></blockquote><p>由此可见，初始部员、初始时间、登录过的设备名，在其它信息正确的情况下，这三者只要回答对一个就能 100% 申诉成功。</p><p>然后再过一个礼拜，如果信息都正确的话，不许摸爸爸就会把引继码发回了<br><img src="https://static-files.kotori.love/blog/2017/05/3507131166.jpg" alt="webwxgetmsgimg.jpg"></p><h3 id="后记（？）">后记（？）</h3><ul><li>回答不要答非所问，多用敬语</li><li>被问到是否经手第三者一定要回答不，就算是朋友也不行</li><li>如果申诉失败的话就换个邮箱继续</li><li>千万不要回信催不许摸爸爸！</li><li>可以说说你和这个账号的故事（大概能提高成功率）</li></ul><h3 id="完惹">完惹</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘛…… 之前 SIF 账号由于手贱弄丢了，所以这里记录一下申诉流程 w&lt;/p&gt;
&lt;p&gt;首先要给 &lt;code&gt;	info-lovelive@klab.com&lt;/code&gt;  发一封邮件表明情况&lt;/p&gt;
&lt;p&gt;如果是切账号时忘记设置密码就用这个&lt;/p&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
    
      <category term="次元" scheme="https://kotori.love/categories/%E6%AC%A1%E5%85%83/"/>
    
    
      <category term="LOVE LIVE!" scheme="https://kotori.love/tags/LOVE-LIVE/"/>
    
      <category term="sif" scheme="https://kotori.love/tags/sif/"/>
    
  </entry>
  
  <entry>
    <title>一个动漫拉动一个市的经济</title>
    <link href="https://kotori.love/archives/lovelive-sunshine-special-announcement.html"/>
    <id>https://kotori.love/archives/lovelive-sunshine-special-announcement.html</id>
    <published>2017-04-27T13:36:00.000Z</published>
    <updated>2020-02-02T14:46:18.578Z</updated>
    
    <content type="html"><![CDATA[<p>贴吧盗链 test</p> <iframe src="https://www.bilibili.com/html/html5player.html?aid=7197292&cid=11794108" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="500px"></iframe><p><img src="https://static-files.kotori.love/blog/2017/04/3247769275.jpg" alt="1.jpg"><br><img src="https://static-files.kotori.love/blog/2017/04/789113247.jpg" alt="2.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;贴吧盗链 test&lt;/p&gt;
 &lt;iframe src=&quot;https://www.bilibili.com/html/html5player.html?aid=7197292&amp;cid=11794108&quot; frameborder=&quot;0&quot; webkitallowfullscree
      
    
    </summary>
    
    
      <category term="终点" scheme="https://kotori.love/categories/%E7%BB%88%E7%82%B9/"/>
    
    
      <category term="lovelive" scheme="https://kotori.love/tags/lovelive/"/>
    
      <category term="bilibili" scheme="https://kotori.love/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Sublime Text 3 中文输入法</title>
    <link href="https://kotori.love/archives/ubuntu-sublime-text-imfix.html"/>
    <id>https://kotori.love/archives/ubuntu-sublime-text-imfix.html</id>
    <published>2017-04-24T05:58:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>sudo apt-get install build-essential libgtk2.0-dev</code></pre><hr><p><code>vim ~/.sublime_imfix.c</code></p><pre><code class="language-c">#include &lt;gtk/gtkimcontext.h&gt;void gtk_im_context_set_client_window (GtkIMContext *context, GdkWindow *window){    GtkIMContextClass *klass;    g_return_if_fail (GTK_IS_IM_CONTEXT (context));    klass = GTK_IM_CONTEXT_GET_CLASS (context);    if (klass-&gt;set_client_window)        klass-&gt;set_client_window (context, window);    g_object_set_data(G_OBJECT(context),&quot;window&quot;,window);    if(!GDK_IS_WINDOW (window))        return;    int width = gdk_window_get_width(window);    int height = gdk_window_get_height(window);    if(width != 0 &amp;&amp; height !=0)        gtk_im_context_focus_in(context);}</code></pre><hr><pre><code>cd ~gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</code></pre><hr><pre><code>sudo mv libsublime-imfix.so /opt/sublime_text/</code></pre><hr><pre><code>sudo vim /usr/bin/subl</code></pre><pre><code class="language-bash">#!/bin/shLD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text &quot;$@&quot;</code></pre><hr><pre><code>sudo vim /usr/share/applications/sublime_text.desktop</code></pre><pre><code>[Desktop Entry]Version=1.0Type=ApplicationName=Sublime TextGenericName=Text EditorComment=Sophisticated text editor for code, markup and proseExec=bash -c &quot;LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text %F&quot;Terminal=falseMimeType=text/plain;Icon=sublime-textCategories=TextEditor;Development;StartupNotify=trueActions=Window;Document;[Desktop Action Window]Name=New WindowExec=bash -c &quot;LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text -n&quot;OnlyShowIn=Unity;[Desktop Action Document]Name=New FileExec=bash -c &quot;LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text --command new_file&quot;OnlyShowIn=Unity;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential libgtk2.0-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;vim ~/.sublime_imfix.c&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="linux" scheme="https://kotori.love/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://kotori.love/tags/ubuntu/"/>
    
      <category term="sublime" scheme="https://kotori.love/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>模拟登录 pixiv.net 后续</title>
    <link href="https://kotori.love/archives/curl-login-pixiv-next.html"/>
    <id>https://kotori.love/archives/curl-login-pixiv-next.html</id>
    <published>2017-03-03T11:30:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇文章<a href="https://kotori.love/archives/curl-login-pixiv.html">《模拟登录 pixiv.net 后续》</a>，老接口已经在 html 上消失了，那么只能按新版接口来惹<br>直接上代码，添加了登录错误的异常 = w= 同时不再需要 <code>sunra/php-simple-html-dom-parse</code> 。<br>可以看到 p 站添加了 <code>Google reCAPTCHA</code> ，但是目前没有碰到验证码。<br>PS:  <code>is_cookie_ok</code>  没有改动，依旧按原来的使用。<br>PSS: nodejs 版 <a href="https://github.com/kokororin/pixiv-cookie" target="_blank" rel="noopener">pixiv-cookie</a></p><pre><code class="language-php">define('BEFORE_LOGIN_COOKIE', __DIR__ . '/BEFORE_LOGIN_COOKIE.txt'); //登录页面的cookiedefine('AFTER_LOGIN_COOKIE', __DIR__ . '/AFTER_LOGIN_COOKIE.txt'); //登录成功后获取到的cookiedefine('USER_AGENT', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36');login_pixiv('YOUR_PIXIVID', 'YOUR_PWD');var_dump(is_cookie_ok(AFTER_LOGIN_COOKIE));function login_pixiv($username, $password){    //获取登陆页cookie    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, 'http://www.pixiv.net');    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_COOKIEJAR, BEFORE_LOGIN_COOKIE);    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);    curl_setopt($ch, CURLOPT_TIMEOUT, 15);    curl_setopt($ch, CURLOPT_USERAGENT, USER_AGENT);    $login_html = curl_exec($ch);    curl_close($ch);    preg_match('/pixiv\.context\.token(.*)=(.*?)(\&quot;|\')(.*?)(\&quot;|\')/', $login_html, $matches);    if (!isset($matches[4])) {        throw new Exception('没有获取到token');    }    $data['pixiv_id'] = $username;    $data['password'] = $password;    $data['captcha'] = '';    $data['g_recaptcha_response'] = '';    $data['post_key'] = $matches[4];    $data['source'] = 'pc';    $data['ref'] = 'wwwtop_accounts_index';    $data['return_to'] = 'http://www.pixiv.net/';    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, 'https://accounts.pixiv.net/api/login?lang=zh');    curl_setopt($ch, CURLOPT_HTTPHEADER, array(        'Origin: https://accounts.pixiv.net',        'User-Agent: ' . USER_AGENT,        'Content-Type: application/x-www-form-urlencoded; charset=UTF-8',        'Referer: https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index',        'X-Requested-With: XMLHttpRequest',    ));    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_COOKIEFILE, BEFORE_LOGIN_COOKIE);    curl_setopt($ch, CURLOPT_COOKIEJAR, AFTER_LOGIN_COOKIE);    curl_setopt($ch, CURLOPT_POST, 1);    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);    $result = curl_exec($ch);    if ($result === false) {        throw new Exception(curl_error($ch));    } else {        $result = json_decode($result, true);        if ($result['error']) {            throw new Exception($result['message']);        } else {            if (!$result['body']['success']) {                throw new Exception(json_encode($result['body']));            }        }    }    curl_close($ch);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继上一篇文章&lt;a href=&quot;https://kotori.love/archives/curl-login-pixiv.html&quot;&gt;《模拟登录 pixiv.net 后续》&lt;/a&gt;，老接口已经在 html 上消失了，那么只能按新版接口来惹&lt;br&gt;
直接上代码，添加了登录错误
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="php" scheme="https://kotori.love/tags/php/"/>
    
      <category term="pixiv" scheme="https://kotori.love/tags/pixiv/"/>
    
      <category term="curl" scheme="https://kotori.love/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>一道神奇的 JavaScript 面试题</title>
    <link href="https://kotori.love/archives/a-javascript-question-create-json-object-from-server.html"/>
    <id>https://kotori.love/archives/a-javascript-question-create-json-object-from-server.html</id>
    <published>2017-02-21T08:00:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下记录自一道群里的面试题</p><pre><code class="language-javascript">const foo = {  bar: &lt;?php echo $strFromServer;?&gt;}</code></pre><p>这段 php 代码，可能输出一个 JSON，也可能输出空。（不是 <code>''</code> ）</p><p>当输出 <strong>空</strong> 的时候</p><pre><code class="language-javascript">const foo = {  bar: }</code></pre><p>很明显会抛出异常</p><p>那么怎么从 JS 语法层面避免这个异常？ (eval is evil)</p><p>方法一： <code>[&lt;?php?&gt;][0]</code> <br> 方法二： <code>(x =&gt; x)(&lt;?php&gt;)</code> <br> 方法三 (擦边)： <code>new Object(&lt;?php?&gt;)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下记录自一道群里的面试题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const foo = {
  bar: &amp;lt;?php echo $strFromServer;?&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段 ph
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="javascript" scheme="https://kotori.love/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>微信浏览器下 pushState 的坑</title>
    <link href="https://kotori.love/archives/vulnerable-pushstate-in-wechat-browser.html"/>
    <id>https://kotori.love/archives/vulnerable-pushstate-in-wechat-browser.html</id>
    <published>2017-02-20T03:41:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 的微信浏览器有一个巨坑，使用 pushState 改变 url 后，此时 location.href 确实变化了，但是微信浏览器认为地址还是打开页面时的地址，这个可以从 “在 Safari 中打开” 看到。</p><p>所以下面的代码就会导致 JSSDK 在 pushState 后验证失败，报错 <code>invalid signature</code> ，原因如上。</p><pre><code class="language-javascript">import wx from 'weixin-js-sdk';export function initWX() {    getConfigFromServer(location.href.split('#')[0])        .then((response) =&gt; {            wx.config(response);        });}// ...监听路由变化$router.onUpdate(() =&gt; {    initWX();});</code></pre><h3 id="解决方法">解决方法</h3><p>首先按照正常的地址进行计算签名，如果失败，就按照页面刚进入时的地址来计算。</p><pre><code class="language-javascript">// 进入应用时先记录进入时的地址global.originalUrl = location.href.split('#')[0];// initWX方法添加error事件export function initWX(url = location.href.split('#')[0]) {    getConfigFromServer(url)        .then((response) =&gt; {            wx.config(response});wx.error(() =&gt; {initWX(global.originalUrl);});        });}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS 的微信浏览器有一个巨坑，使用 pushState 改变 url 后，此时 location.href 确实变化了，但是微信浏览器认为地址还是打开页面时的地址，这个可以从 “在 Safari 中打开” 看到。&lt;/p&gt;
&lt;p&gt;所以下面的代码就会导致 JSSDK 在 pu
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="javascript" scheme="https://kotori.love/tags/javascript/"/>
    
      <category term="wechat" scheme="https://kotori.love/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>2016 年度博客统计报告</title>
    <link href="https://kotori.love/archives/2016-blog-analytics.html"/>
    <id>https://kotori.love/archives/2016-blog-analytics.html</id>
    <published>2017-01-07T06:29:59.000Z</published>
    <updated>2020-02-02T14:46:18.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="会话数与浏览量">会话数与浏览量</h3><p>过去的 365 天里，本博客的基本访问情况如下图：<br><img src="https://static-files.kotori.love/blog/2017/01/1716341378.png" alt=""></p><p>这期间，本博客一共迎来了 3309 位用户，他们一共产生了 7417 次会话以及 20986 次浏览。平均每天 9 位用户、20 次会话以及 57 次浏览。</p><h3 id="地理位置与语言">地理位置与语言</h3><p>毫无疑问，本博客主要流量都来自于中国大陆，占到 56.61%：<br><img src="https://static-files.kotori.love/blog/2017/01/1268377185.png" alt=""></p><p>而从浏览器语言上看，简体中文占到 74.65%，也就是说以上的中国大陆流量并不准确（<br><img src="https://static-files.kotori.love/blog/2017/01/2868255890.png" alt=""></p><h3 id="操作系统与浏览器">操作系统与浏览器</h3><p>首先来看操作系统概况，本博客主要流量还是来自于桌面端。<br><img src="https://static-files.kotori.love/blog/2017/01/2832465407.png" alt=""></p><p>浏览器方面，来自 IE 的份额不足 2%：<br><img src="https://static-files.kotori.love/blog/2017/01/1050433201.png" alt=""></p><h3 id="流量来源">流量来源</h3><p>本博客流量来源主要有搜索引擎、第三方网站引荐、直接访问三大块。完整统计如下：<br><img src="https://static-files.kotori.love/blog/2017/01/3589224206.png" alt=""></p><p>Google 对原创博客非常友好，使用 HTTPS 并提高访问速度也有利于 Google 权重，所以本博客在 Google 的排名非常好，最终高达 11.31% 的流量均来自于 Google 搜索。而百度对原创博客就没有这么友好了，但基于它在国内庞大的市场份额，本博客也有 0.62% 的流量来自于百度：<br><img src="https://static-files.kotori.love/blog/2017/01/779984279.png" alt="Screen Shot 2017-01-07 at 2.26.42 PM.png"></p><h3 id="后记">后记</h3><p>在 2016 年已经过去的这五个月里，我一共写了 18 篇文章，如果保持这个更新频率，今年的总文章数会达到 83 篇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;会话数与浏览量&quot;&gt;会话数与浏览量&lt;/h3&gt;
&lt;p&gt;过去的 365 天里，本博客的基本访问情况如下图：&lt;br&gt;
&lt;img src=&quot;https://static-files.kotori.love/blog/2017/01/1716341378.png&quot; alt=&quot;
      
    
    </summary>
    
    
      <category term="终点" scheme="https://kotori.love/categories/%E7%BB%88%E7%82%B9/"/>
    
    
      <category term="统计" scheme="https://kotori.love/tags/%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="站务" scheme="https://kotori.love/tags/%E7%AB%99%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>react.js を利用して、創建した挿絵の画像欄</title>
    <link href="https://kotori.love/archives/react-js-pinterest-style-layout-site.html"/>
    <id>https://kotori.love/archives/react-js-pinterest-style-layout-site.html</id>
    <published>2016-11-25T05:04:00.000Z</published>
    <updated>2020-02-01T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>react</code> + <code>redux</code>  を使って、Web アプリケーションを組み合わせた。それは <code>pixiv.net</code>  の挿絵の画像欄であり、私はそれを <code>pixivの「ラブライブ」発見</code> と呼ばれている。 <code>pixiv.net</code>  挿絵のインターネットにラブライブに関するラブライブ！学園アイドル祭の作品を用いる。ラブライブがそのアプリケーションが好きになると思う。</p><h3 id="特徴">特徴</h3><ul><li>ラベルによって、挿絵を選別する</li><li>挿絵の詳細情報を調べる</li><li>pixiv に登録して、好きな挿絵にブックマークをする</li></ul><h3 id="主な技術">主な技術:</h3><ul><li>react</li><li>react-dom</li><li>react-router-component</li><li>redux</li><li>redux-thunk</li><li>react-redux</li><li>react-mdl</li><li>whatwg-fetch</li><li>webpack</li></ul><h4 id="AJAXリクエスト">AJAX リクエスト</h4><p>AJAX リクエストに関して、たくさんの選択肢がある: <code>fetch</code> 、 <code>superagent</code> 、 <code>axios</code> 、その上  <code>jQuery.ajax</code> 。総合的に比べて、標準的な <code>fetch</code>  は必ず最高な選択である。</p><p>fetch の主な長所:</p><ul><li>簡単な文法、更に語義化のようだ</li><li>Promise の標準に基いで、async/await にサポートする。</li><li>便利な同型定理</li></ul><p>原生の支持率は高くない。しかし以下の polyfill を取り入れて、IE8 + にサポートすることができる:</p><ul><li>IE8 は ES3 であるから、ES5 の polyfill を取り入れるのが必要である:<a href="https://github.com/es-shims/es5-shim" target="_blank" rel="noopener">es5-shim, es5-sham</a></li><li>Promise の polyfill を取り入れ: <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">es6-promise</a></li><li>fetch 探測倉を取り入れ:<a href="https://github.com/camsong/fetch-detector" target="_blank" rel="noopener">fetch-detector</a></li><li>fetch の polyfill を取り入れ: <a href="https://github.com/camsong/fetch-ie8" target="_blank" rel="noopener">fetch-ie8</a></li><li>選ばれ：もし jsonp も使えば、<a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="noopener">fetch-jsonp</a> を取り入れる</li><li>選ばれ：Babel の runtime・モデルを開けて、今、async/await を使っていく</li></ul><p>Fetch polyfill の基本的な原理は window.fetch の方法があるかどうかを測定する。ないなら、XHR を利用して実現する。これも<a href="https://github.com/github/fetch" target="_blank" rel="noopener"> github/fetch</a> の方法であり、しかしあるブラウザー（Chrome45）は元で fetch をサポートする。これらの庫は今、毎日に数千万のリクエストが使用していて、問題ないである！</p><p>fetch のよくある質問</p><ul><li>Fetch リクエストは既定に cookie が無いから、 <code>fetch(url, {credentials: 'include'})</code>  を設置するのが必要である。</li><li>サーバーは <code>400</code> 、 <code>500</code>  ミス番号に戻る時、拒絶しない。ネットワーク・ミスのせいで、そのリクエストが完成できない場合、fetch が拒絶される。</li></ul><h4 id="性能合理化">性能合理化</h4><p>このアプリケーションの中に、一つの長いリストがあって、すべての画像のモジュールで onClick 事件を縛って、もしリストの数量は上がってきて、性能の問題も明らかで、ソリューションは主に以下:</p><h5 id="propsの中でbind方法を使えないでください。">props の中で bind 方法を使えないでください。</h5><p><code>onClick</code>  中で <code>bind(this)</code>  を操作しないでください。そうすると、毎回 <code>render</code>  が新しい関数を形成するから、性能に対する影響は顕著である。同じ、矢じり関数 <code>()=&gt;{}</code>  のを使う場合、同じ理論である。それも一回に自動 <code>bind</code>  する。良い方案は <code>constructor</code>  の中で事前にバンドしたそうである。<a href="https://daveceddia.com/avoid-bind-when-passing-props/" target="_blank" rel="noopener">Don’t Use Bind When Passing Props</a> 。この文章は共に 9 種類のソリューションに言及して、それぞれ利害がある。</p><h5 id="リストに１つの正しいkey属性をあげる">リストに１つの正しい key 属性をあげる</h5><p>周知のように、react 循環中のリストは必ず <code>key</code>  属性を与えなければならなくて、この属性はユーザーが自分で使うのではなくて、React 自分で使ったのです。配列の元素に必ず唯一の <code>key</code>  属性を提供しなければならなくて、私達は直接に配列の <code>index</code>  を使って <code>key</code>  とする。実はそれが何度も一挙であり、 <code>key</code>  を提供しないなら、react は黙認に採用したのが <code>index</code>  である。良い方案は<a href="https://www.npmjs.com/package/shortid" target="_blank" rel="noopener"> shortid</a> を使って形成するのである。それは主に<a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.kxj9ttkx4" target="_blank" rel="noopener"> Index as a key is an anti-pattern</a> を参考した。</p><h5 id="setState慎重に用いる">setState 慎重に用いる</h5><p>データを <code>Redux</code>  に任せて管理したなら、できるだけ <code>Redux</code>  でデータと状態 <code>state</code>  を管理してください。少数の情況以外、 <code>shouldComponentUpdate</code>  も <code>state</code>  の比較が必要なことを忘れないでください。</p><h5 id="Componentが必要なpropsだけを順送りする">Component が必要な props だけを順送りする</h5><p>順送りしたのが多すぎ、あるいは段階が深すぎの場合、 <code>shouldComponentUpdate</code>  のデータ比較の負担をもたらして、そして、慎重に用いてください。</p><h5 id="shouldComponentUpdate使用">shouldComponentUpdate 使用</h5><p><code>shouldComponentUpdate</code>  は黙認状況で <code>true</code>  に戻って、つまり <code>props</code>  あるいは state が変化すれば、このモジュールは更新して、そのとおり、 <code>props</code>  の変化のように、モジュールも更新する可能性がある。 リストの <code>VirtualDOM</code>  は毎回レンダリングする時、新生するから、最も簡単な方法はすべての Item の <code>shouldComponentUpdate</code>  を実現することである（現在と取り入れた props を比較するのを通じて、更新するかどうかを判断する。属性は <code>object</code>  であるのが、内部の変化を判断するのが必要ので、もし私達は <code>immutable―js</code>  が必要である）。</p><h5 id="PureRenderMixin">PureRenderMixin</h5><p>React が提供した <code>PureRenderMixin</code>  は、実は以上の必要なことをやってくれて、ファイルの方法に基づいて、十分である。しかし、このプラグインはすべての属性を比較して、いくつか状況で予想するのと違う可能性がある。</p><h5 id="モバイルサイドのロード最適化">モバイルサイドのロード最適化</h5><p>Javascript を <code>localStorage</code>  にキャッシュメモリして、バージョンが変動した後、サーバーで新しい js をダウンロードする。ソリューションはモバイル WEB 通用最適化策略紹介からのである。 <code>localStorage</code>  は静態の資源をキャッシュメモリして、モバイルサイドと高いバージョンのブラウザーで試み価値があるそうである。ブラウザーを通じて、静的ファイルをキャッシュメモリすることができるけど、いくつか状況で（たとえば f5 の更新）、それども <code>cache―control: max―age=0</code>  のリクエストを提出する。リクエストを節約する目的で、静態資源のリクエスト方法を改造することができて、すべての静態資源をひとつのリクエストを通じてロードする。そうすれば、いずれにしても、ページはただ一つのリクエストを出す。もし静的なファイルは更新があれば、サーバーは更新するファイル内容に戻って、js を通じてページの中に挿入して、 <code>localStorage</code>  の中でキャッシュメモリをする。もし静的ファイルは更新がないなら、直接に <code>localStorage</code>  の中から取り出して、ページの中で挿入して十分である。モバイルサイドにとって、js と css これらの静的ファイルのリクエストをひとつに減らして、やはり効果があるそうである。具体的なものは百度のモバイル版、に参考してください。単のページの運用にとって、 <code>localStorage</code>  の貯蓄枠板を使うのも良い選択である。</p><h5 id="インターネット・リクエスト合理化">インターネット・リクエスト合理化</h5><p>Ajax のリクエストもキャッシュメモリして、キャッシュメモリが必要なリクエストは期限が切れ時間のカラムに戻る。データを得た後、期限が切れ時間とデータを <code>localStroage</code>  中で保存して、次回にのリクエストは期限が切れ時間と現在時間に比べて、再度リクエストが必要かどうかを判断する。</p><p>その他、react 各種の問題の集合を進め:<a href="https://github.com/timarney/react-faq" target="_blank" rel="noopener">react-faq</a></p><p>プロジェクト・アドレス:<br><a href="https://pixiv.moe" target="_blank" rel="noopener">https://pixiv.moe</a><br><a href="https://github.com/LoveLiveSunshine/pixiv.moe" target="_blank" rel="noopener">https://github.com/LoveLiveSunshine/pixiv.moe</a></p><p>1 枚の GIF プレビュー図:<br><img src="https://github.com/LoveLiveSunshine/pixiv.moe/blob/master/src/images/intro.gif?raw=true" alt=""></p><p><a href="http://qiita.com/kokororin/items/5c065fb48dcbf61edc6d" target="_blank" rel="noopener">Qiita</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;react&lt;/code&gt; + &lt;code&gt;redux&lt;/code&gt;  を使って、Web アプリケーションを組み合わせた。それは &lt;code&gt;pixiv.net&lt;/code&gt;  の挿絵の画像欄であり、私はそれを &lt;code&gt;pixivの「ラブライブ」発見&lt;/cod
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="react" scheme="https://kotori.love/tags/react/"/>
    
      <category term="redux" scheme="https://kotori.love/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>模拟登录 pixiv.net</title>
    <link href="https://kotori.love/archives/curl-login-pixiv.html"/>
    <id>https://kotori.love/archives/curl-login-pixiv.html</id>
    <published>2016-11-01T02:10:00.000Z</published>
    <updated>2020-02-02T14:46:18.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意：本文的方法已作废，新方法在<a href="https://kotori.love/archives/curl-login-pixiv-next.html">这里</a></strong></p><blockquote><p>由于 pixivAPI 有一些内容无法获取，于是模拟登录就派上用场辣</p></blockquote><p>旧版登录接口 (<a href="https://www.secure.pixiv.net/login.php" target="_blank" rel="noopener">https://www.secure.pixiv.net/login.php</a>) 已经作废。目前新版登录页是用 React 渲染的，但是还是为老浏览器用户开启了兼容♂通道，首先找出这段表单代码：</p><pre><code class="language-html">&lt;div id=&quot;old-login&quot; style=&quot;display: none;&quot;&gt;  &lt;form action=&quot;/login&quot; method=&quot;POST&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;post_key&quot; value=&quot;b827a089c8e7209503d23235d2ba4b43&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;return_to&quot; value=&quot;http://www.pixiv.net/&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;lang&quot; value=&quot;zh&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;source&quot; value=&quot;pc&quot;&gt;    &lt;div class=&quot;input-field-group&quot;&gt;      &lt;div class=&quot;input-field&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;pixiv_id&quot; placeholder=&quot;邮箱地址/pixiv ID&quot; autocapitalize=&quot;off&quot; autocomplete=&quot;off&quot;&gt;      &lt;/div&gt;      &lt;div class=&quot;input-field&quot;&gt;        &lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;密码&quot; autocapitalize=&quot;off&quot; autocomplete=&quot;off&quot;&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;ul class=&quot;error-msg-list&quot;&gt;&lt;/ul&gt;    &lt;button type=&quot;submit&quot; class=&quot;signup-form__submit&quot;&gt;登录&lt;/button&gt;    &lt;div class=&quot;signup-form-nav&quot;&gt;      &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;      &lt;div class=&quot;right&quot;&gt;&lt;a href=&quot;https://www.pixiv.net/reminder.php&quot; target=&quot;_blank&quot;&gt;忘记了&lt;/a&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/form&gt;&lt;/div&gt;</code></pre><p>发现需要 post 如下参数：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>post_key</td><td>类似于 token</td></tr><tr><td>return_to</td><td>回跳地址</td></tr><tr><td>lang</td><td>语言</td></tr><tr><td>source</td><td>来源</td></tr><tr><td>pixiv_id</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr></tbody></table><p>提交的表单网址： <code>https://accounts.pixiv.net/login</code></p><p>因为有 token 的存在，所以提交的时候也需要登录页的生成的 cookie，不提交 cookie 的后果就是如下的 400 Bad Request：(/´Д｀)/<br><img src="https://static-files.kotori.love/blog/2016/10/3972916762.png" alt=""></p><p>下面直接上全宇宙最好的语言进行登录（啪）<br>需要注意，首先需要安装一个 HTML DOM 解析包 <code>sunra/php-simple-html-dom-parse</code> ，运行一下 <code>composer require &quot;sunra/php-simple-html-dom-parser&quot;</code>  就行了。</p><p>主要的代码：</p><pre><code>use Sunra\PhpSimple\HtmlDomParser;define('BEFORE_LOGIN_COOKIE', __DIR__ . '/BEFORE_LOGIN_COOKIE.txt');//登录页面的cookiedefine('AFTER_LOGIN_COOKIE', __DIR__ . '/AFTER_LOGIN_COOKIE.txt');//登录成功后获取到的cookiedefine('USER_AGENT', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36');function login_pixiv($username, $password){    $login_url = 'https://accounts.pixiv.net/login';    //获取登陆页cookie    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, $login_url);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_COOKIEJAR, BEFORE_LOGIN_COOKIE);    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);    curl_setopt($ch, CURLOPT_TIMEOUT, 15);    curl_setopt($ch, CURLOPT_USERAGENT, USER_AGENT);    $login_html = curl_exec($ch);    curl_close($ch);    $dom = HtmlDomParser::str_get_html($login_html);    $form = $dom-&gt;find('#old-login', 0)-&gt;find('form', 0);    $data['post_key'] = $form-&gt;find('input[name=&quot;post_key&quot;]', 0)-&gt;value;    $data['return_to'] = $form-&gt;find('input[name=&quot;return_to&quot;]', 0)-&gt;value;    $data['lang'] = $form-&gt;find('input[name=&quot;lang&quot;]', 0)-&gt;value;    $data['source'] = $form-&gt;find('input[name=&quot;source&quot;]', 0)-&gt;value;    $data['pixiv_id'] = $username;    $data['password'] = $password;    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, $login_url);    curl_setopt($ch, CURLOPT_HEADER, 0);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_COOKIEFILE, BEFORE_LOGIN_COOKIE);    curl_setopt($ch, CURLOPT_COOKIEJAR, AFTER_LOGIN_COOKIE);    curl_setopt($ch, CURLOPT_POST, 1);    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));    curl_exec($ch);    curl_close($ch);}</code></pre><p>调用 <code>login_pixiv()</code>  方法登录成功获取到 cookie 后，就可以<strong>为♂所♂欲♂为</strong>了，这个 cookie 的有效期为一个月，提供一个验证 cookie 是否有效的方法：</p><pre><code>function is_cookie_ok($cookie){    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, 'http://www.pixiv.net/setting_profile.php');    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    curl_setopt($ch, CURLOPT_HEADER, 1);    curl_setopt($ch, CURLOPT_AUTOREFERER, 1);    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);    curl_setopt($ch, CURLOPT_TIMEOUT, 15);    curl_setopt($ch, CURLOPT_USERAGENT, USER_AGENT);    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);    $response = curl_exec($ch);    curl_close($ch);    $headers = [];    $header_text = substr($response, 0, strpos($response, &quot;\r\n\r\n&quot;));    foreach (explode(&quot;\r\n&quot;, $header_text) as $i =&gt; $line) {        if ($i === 0) {            $headers['http_code'] = $line;        } else {            list($key, $value) = explode(': ', $line);            $headers[$key] = $value;        }    }    if (strpos($headers['http_code'], '200') === false) {        return false;    }    return true;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注意：本文的方法已作废，新方法在&lt;a href=&quot;https://kotori.love/archives/curl-login-pixiv-next.html&quot;&gt;这里&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 pixivAPI
      
    
    </summary>
    
    
      <category term="科技" scheme="https://kotori.love/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="php" scheme="https://kotori.love/tags/php/"/>
    
      <category term="pixiv" scheme="https://kotori.love/tags/pixiv/"/>
    
      <category term="curl" scheme="https://kotori.love/tags/curl/"/>
    
  </entry>
  
</feed>
